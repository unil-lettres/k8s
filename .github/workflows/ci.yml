name: ci
on:
  push:
    branches:
      - "development"
      - "main"
permissions: read-all

jobs:
  validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Install kubeconform
        run: |
          curl -sLO https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar -xzf kubeconform-linux-amd64.tar.gz
          sudo mv kubeconform /usr/local/bin/kubeconform
          kubeconform -v

      - name: Render and validate all Helm charts
        run: |
          set -e  # Exit the script if any command fails
          
          # Find all Helm chart directories and process each one
          find . -name 'Chart.yaml' -exec dirname {} \; | while read -r chart_dir; do
            echo "Processing Helm chart in $chart_dir"
            mkdir -p "rendered_templates/$chart_dir"
          
            # Render Helm templates
            echo "Rendering templates for $chart_dir"
            helm template "$chart_dir" --output-dir "rendered_templates/$chart_dir"
            if [ $? -ne 0 ]; then
              echo "Helm template rendering failed for $chart_dir"
              exit 1
            fi
          
            # Validate rendered templates with kubeconform
            echo "Validating rendered templates for $chart_dir"
            find "rendered_templates/$chart_dir" -name '*.yaml' -exec kubeconform --strict --verbose {} +
            if [ $? -ne 0 ]; then
              echo "kubeconform validation failed for $chart_dir"
              exit 1
            fi
          done

      - name: Lint all Helm charts
        run: |
          set -e  # Exit the script if any command fails
          
          # Find all Helm chart directories and lint each one
          find . -name 'Chart.yaml' -exec dirname {} \; | while read -r chart_dir; do
            echo "Linting Helm chart in $chart_dir"
            helm lint "$chart_dir"
            if [ $? -ne 0 ]; then
              echo "Helm lint failed for $chart_dir"
              exit 1
            fi
          done
